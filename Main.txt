package Client;


import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import Interface.GroupChatInterface;
import Interface.ImagesInterface;
import Interface.MembersInterface;
import Interface.MessengerInterface;

public class Main
{
	JFrame mainFrame;
	private JPanel mainPanel;
	private JPanel memberPanel;
	Registry myRegistry;
	ImagesInterface images;
	MembersInterface members;
	BufferedImage image;
	private String username;
	GroupChatInterface chat;
	MessengerInterface m;
	private int memberNumber;
	private SendImages sendImages;
	private CamerasPanel p;
	private MainCameraPanel mp;
	private int isItMe;
	private boolean breakBooelan = false;

	public Main(int me) throws RemoteException, NotBoundException
	{
		mainFrame = new JFrame();
		isItMe = me;
		connectWithServer();
		if(breakBooelan == false)
		{
			mainFrame.setExtendedState(JFrame.MAXIMIZED_BOTH); 
			mainFrame.setSize(600, 500);
			mainFrame.setLayout(new GridLayout(2,1));
			mainPanel = new JPanel();
			mainPanel.setLayout(new GridLayout(1,2));
			memberPanel = new JPanel();
			memberPanel.setLayout(new GridLayout(2, 1));
			mainFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	
			mainFrame.addWindowListener(new WindowAdapter()
			{
			   public void windowClosing(WindowEvent windowEvent)
			   {
			      try
			      {
			    	  p.stop();
			    	  mp.stop();
			    	  sendImages.stop();
			    	  images.removeImage(memberNumber);
			    	  members.removeMember(memberNumber);
			      }
			      catch(RemoteException e)
			      {
			    	  e.printStackTrace();
			      }
			   }
			});
	
			sendImages = new SendImages(images, memberNumber);
			sendImages.start();
	
			ConnectPanelToMessenger cptm = new ConnectPanelToMessenger();
			ChatPanel chatPannel = new ChatPanel(chat, cptm);
			m = new Messenger(username, chat, cptm);
			cptm.setter(m, chatPannel);
	
			mainPanel.add((JPanel)chatPannel);
			MemberToSee memberToSee = new MemberToSee();
			mp = new MainCameraPanel(images, members, memberToSee);
			mainPanel.add(mp);
			mainFrame.add(mainPanel);
			chat.login(m);
			chat.sendToAll("vetem sa u konektova", m);
			System.out.println("QYSH " + me + " >>" + isItMe);
	
			p = new CamerasPanel(images, members, mp, memberToSee);
			mainFrame.add(p);
	
			mainFrame.setVisible(true);
			p.start();
			mp.start();
		}
	}

	private void connectWithServer() throws  NotBoundException
	{
		String inputIp;
		if(isItMe == 0)
		{
			inputIp = JOptionPane.showInputDialog("Shkruani IP per tu konektuar: ");
		}
		else
		{
			inputIp = "localhost";
		}
		if(inputIp != null)
		{
			try
			{
				myRegistry = LocateRegistry.getRegistry(inputIp, 1097);
				images = (ImagesInterface) myRegistry.lookup("images");
				members = (MembersInterface) myRegistry.lookup("members");
				chat = (GroupChatInterface) myRegistry.lookup("chat");
				username = JOptionPane.showInputDialog("Shkruane emrin tuaj:");
				if(username != null && !username.equals(""))
				{
					memberNumber = members.addMember(username);
					if(memberNumber == -1)
					{
						JOptionPane.showMessageDialog(null, "Nuk mund te pranohen me shume klienta");
						System.exit(0);
					}
				}
				else
				{
					JOptionPane.showMessageDialog(null, "Duhet te shkruani emrin!");
					mainFrame.dispose();
					breakBooelan = true;
				}
			}
			catch (RemoteException e)
			{
				JOptionPane.showMessageDialog(null, "Kjo adrese nuk eshte e disponueshme!");
				mainFrame.dispose();
				breakBooelan = true;
			}
		
		}
		else
		{
			JOptionPane.showMessageDialog(null, "Nuk keni shkruar IP te duhur");
			mainFrame.dispose();
			breakBooelan = true;
		}
	}
}